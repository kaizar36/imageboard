-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql
module Imageboard.Interface.Node exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.SelectionSet exposing (FragmentSelectionSet(..), SelectionSet(..))
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Imageboard.Object
import Imageboard.Interface
import Imageboard.Union
import Imageboard.Scalar
import Imageboard.InputObject
import Imageboard.ScalarCodecs
import Json.Decode as Decode
import Graphql.Internal.Encode as Encode exposing (Value)


type alias Fragments decodesTo =
    {
    onImage : SelectionSet decodesTo Imageboard.Object.Image,
 onQuery : SelectionSet decodesTo RootQuery
    }


{-| Build an exhaustive selection of type-specific fragments.
-}
fragments :
      Fragments decodesTo
      -> SelectionSet decodesTo Imageboard.Interface.Node
fragments selections____ =
    Object.exhaustiveFragmentSelection
        [
         Object.buildFragment "Image" selections____.onImage,
 Object.buildFragment "Query" selections____.onQuery
        ]


{-| Can be used to create a non-exhaustive set of fragments by using the record
update syntax to add `SelectionSet`s for the types you want to handle.
-}
maybeFragments : Fragments (Maybe decodesTo)
maybeFragments =
    {
      onImage = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing),
 onQuery = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    }
{-| A globally unique identifier. Can be used in various places throughout the system to identify this single value.
-}
nodeId : SelectionSet Imageboard.ScalarCodecs.Id Imageboard.Interface.Node
nodeId =
      Object.selectionForField "ScalarCodecs.Id" "nodeId" [] (Imageboard.ScalarCodecs.codecs |> Imageboard.Scalar.unwrapCodecs |> .codecId |> .decoder)
