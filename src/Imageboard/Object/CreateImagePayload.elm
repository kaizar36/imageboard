-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql
module Imageboard.Object.CreateImagePayload exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.SelectionSet exposing (SelectionSet)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Imageboard.Object
import Imageboard.Interface
import Imageboard.Union
import Imageboard.Scalar
import Imageboard.InputObject
import Imageboard.ScalarCodecs
import Json.Decode as Decode
import Graphql.Internal.Encode as Encode exposing (Value)
import Imageboard.Enum.ImagesOrderBy
{-| The exact same `clientMutationId` that was provided in the mutation input,
unchanged and unused. May be used by a client to track mutations.
-}
clientMutationId : SelectionSet (Maybe String) Imageboard.Object.CreateImagePayload
clientMutationId =
      Object.selectionForField "(Maybe String)" "clientMutationId" [] (Decode.string |> Decode.nullable)


{-| The `Image` that was created by this mutation.
-}
image : SelectionSet decodesTo Imageboard.Object.Image
 -> SelectionSet (Maybe decodesTo) Imageboard.Object.CreateImagePayload
image object____ =
      Object.selectionForCompositeField "image" [] (object____) (Basics.identity >> Decode.nullable)


{-| Our root query field type. Allows us to run any query from our mutation payload.
-}
query : SelectionSet decodesTo RootQuery
 -> SelectionSet (Maybe decodesTo) Imageboard.Object.CreateImagePayload
query object____ =
      Object.selectionForCompositeField "query" [] (object____) (Basics.identity >> Decode.nullable)


type alias ImageEdgeOptionalArguments = { orderBy : OptionalArgument (List Imageboard.Enum.ImagesOrderBy.ImagesOrderBy) }

{-| An edge for our `Image`. May be used by Relay 1.

  - orderBy - The method to use when ordering `Image`.

-}
imageEdge : (ImageEdgeOptionalArguments -> ImageEdgeOptionalArguments)
 -> SelectionSet decodesTo Imageboard.Object.ImagesEdge
 -> SelectionSet (Maybe decodesTo) Imageboard.Object.CreateImagePayload
imageEdge fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { orderBy = Absent }

        optionalArgs____ =
            [ Argument.optional "orderBy" filledInOptionals____.orderBy ((Encode.enum Imageboard.Enum.ImagesOrderBy.toString) |> Encode.list) ]
                |> List.filterMap Basics.identity
    in
      Object.selectionForCompositeField "imageEdge" optionalArgs____ (object____) (Basics.identity >> Decode.nullable)
