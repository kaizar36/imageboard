-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql
module Imageboard.Query exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)
import Imageboard.Object
import Imageboard.Interface
import Imageboard.Union
import Imageboard.Scalar
import Imageboard.InputObject
import Imageboard.ScalarCodecs
import Graphql.Internal.Builder.Object as Object
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Json.Decode as Decode exposing (Decoder)
import Graphql.Internal.Encode as Encode exposing (Value)
import Imageboard.Enum.ImagesOrderBy
{-| Exposes the root query type nested one level down. This is helpful for Relay 1
which can only query top level fields if they are in a particular form.
-}
query : SelectionSet decodesTo RootQuery
 -> SelectionSet decodesTo RootQuery
query object____ =
      Object.selectionForCompositeField "query" [] (object____) (Basics.identity)


{-| The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
-}
nodeId : SelectionSet Imageboard.ScalarCodecs.Id RootQuery
nodeId =
      Object.selectionForField "ScalarCodecs.Id" "nodeId" [] (Imageboard.ScalarCodecs.codecs |> Imageboard.Scalar.unwrapCodecs |> .codecId |> .decoder)


type alias NodeRequiredArguments = { nodeId : Imageboard.ScalarCodecs.Id }

{-| Fetches an object given its globally unique `ID`.

  - nodeId - The globally unique `ID`.

-}
node : NodeRequiredArguments
 -> SelectionSet decodesTo Imageboard.Interface.Node
 -> SelectionSet (Maybe decodesTo) RootQuery
node requiredArgs____ object____ =
      Object.selectionForCompositeField "node" [ Argument.required "nodeId" requiredArgs____.nodeId ((Imageboard.ScalarCodecs.codecs |> Imageboard.Scalar.unwrapEncoder .codecId)) ] (object____) (Basics.identity >> Decode.nullable)


type alias AllImagesOptionalArguments = { first : OptionalArgument Int
 , last : OptionalArgument Int
 , offset : OptionalArgument Int
 , before : OptionalArgument Imageboard.ScalarCodecs.Cursor
 , after : OptionalArgument Imageboard.ScalarCodecs.Cursor
 , orderBy : OptionalArgument (List Imageboard.Enum.ImagesOrderBy.ImagesOrderBy)
 , condition : OptionalArgument Imageboard.InputObject.ImageCondition }

{-| Reads and enables pagination through a set of `Image`.

  - first - Only read the first `n` values of the set.
  - last - Only read the last `n` values of the set.
  - offset - Skip the first `n` values from our `after` cursor, an alternative to cursor
based pagination. May not be used with `last`.
  - before - Read all values in the set before (above) this cursor.
  - after - Read all values in the set after (below) this cursor.
  - orderBy - The method to use when ordering `Image`.
  - condition - A condition to be used in determining which values should be returned by the collection.

-}
allImages : (AllImagesOptionalArguments -> AllImagesOptionalArguments)
 -> SelectionSet decodesTo Imageboard.Object.ImagesConnection
 -> SelectionSet (Maybe decodesTo) RootQuery
allImages fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, last = Absent, offset = Absent, before = Absent, after = Absent, orderBy = Absent, condition = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "offset" filledInOptionals____.offset (Encode.int), Argument.optional "before" filledInOptionals____.before ((Imageboard.ScalarCodecs.codecs |> Imageboard.Scalar.unwrapEncoder .codecCursor)), Argument.optional "after" filledInOptionals____.after ((Imageboard.ScalarCodecs.codecs |> Imageboard.Scalar.unwrapEncoder .codecCursor)), Argument.optional "orderBy" filledInOptionals____.orderBy ((Encode.enum Imageboard.Enum.ImagesOrderBy.toString) |> Encode.list), Argument.optional "condition" filledInOptionals____.condition (Imageboard.InputObject.encodeImageCondition) ]
                |> List.filterMap Basics.identity
    in
      Object.selectionForCompositeField "allImages" optionalArgs____ (object____) (Basics.identity >> Decode.nullable)


type alias ImageByIdRequiredArguments = { id : Int }

imageById : ImageByIdRequiredArguments
 -> SelectionSet decodesTo Imageboard.Object.Image
 -> SelectionSet (Maybe decodesTo) RootQuery
imageById requiredArgs____ object____ =
      Object.selectionForCompositeField "imageById" [ Argument.required "id" requiredArgs____.id (Encode.int) ] (object____) (Basics.identity >> Decode.nullable)


type alias ImageRequiredArguments = { nodeId : Imageboard.ScalarCodecs.Id }

{-| Reads a single `Image` using its globally unique `ID`.

  - nodeId - The globally unique `ID` to be used in selecting a single `Image`.

-}
image : ImageRequiredArguments
 -> SelectionSet decodesTo Imageboard.Object.Image
 -> SelectionSet (Maybe decodesTo) RootQuery
image requiredArgs____ object____ =
      Object.selectionForCompositeField "image" [ Argument.required "nodeId" requiredArgs____.nodeId ((Imageboard.ScalarCodecs.codecs |> Imageboard.Scalar.unwrapEncoder .codecId)) ] (object____) (Basics.identity >> Decode.nullable)
